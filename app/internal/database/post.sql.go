// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreatePost = `-- name: CreatePost :one
INSERT INTO post
(
  user_id,
  content,
  created_at
)
VALUES(
  $1, $2, $3
)
RETURNING id, user_id, content, created_at
`

type CreatePostParams struct {
	UserID    int32            `json:"user_id"`
	Content   string           `json:"content"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, CreatePost, arg.UserID, arg.Content, arg.CreatedAt)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const DeletePost = `-- name: DeletePost :exec
DELETE 
FROM post
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeletePost, id)
	return err
}

const GetPost = `-- name: GetPost :one
SELECT id, user_id, content, created_at
FROM post
where id = $1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRow(ctx, GetPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const UpdatePost = `-- name: UpdatePost :one
UPDATE post
SET content = $1
WHERE id = $2
RETURNING id, user_id, content, created_at
`

type UpdatePostParams struct {
	Content string `json:"content"`
	ID      int32  `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, UpdatePost, arg.Content, arg.ID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
